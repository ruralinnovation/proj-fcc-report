---
title: "testing other eligibilities"
date: last-modified
format: 
  html:
    code-fold: true
engine: knitr
---

```{r}
#| label: utility functions
table_with_options <- function(x){DT::datatable(x, rownames = FALSE,
              extensions = 'Buttons', 
                options = list(
                          dom = 'Blfrtip',
                          buttons = list('copy', 'print', list(
                            extend = 'collection',
                            buttons = c('csv', 'excel'),
                            text = 'Download')
                                    )
                          )
            )}
```

The goal of this page is to record the effect on not including some technologies on the eligibility of BSL and census block. 

The dataset to produce this comparison was done quickly and processed with pgadmin. 

# Creating raw data

## Base table

```{sql}
#| label: sql to get basic table
#| eval: false
-- we need the list of census block
create table staging.us_ntia(
	geoid_bl char(15)	
);
insert into 
	staging.us_ntia
select 
	geoid20 as geoid_bl
from 
    sch_census_tiger.source_tiger_2020_blocks;


-- we count all locations
alter table staging.us_ntia 
add column cnt_total_locations integer;
update
	staging.us_ntia as t1
set 
	cnt_total_locations = t2.cnt_total_locations
from 
	(select 
	    block_geoid,
	    count(distinct location_id) as cnt_total_locations
    from 
		staging.june23	
    group by 
		block_geoid)  as t2
where   
    t1.geoid_bl = t2.block_geoid;

-- we count all bcat locations only
-- this is needed for the case when we have locations but 0 mesures
alter table staging.us_ntia 
add column cnt_bcat_locations integer;
update
	staging.us_ntia as t1
set 
	cnt_bcat_locations = t2.cnt_bcat_locations
from 
	(select 
	    block_geoid,
	    count(distinct location_id) as cnt_bcat_locations
	from 
		staging.bcat_raw	
	group by 
		block_geoid)  as t2
where    
	t1.geoid_bl = t2.block_geoid;
```

## Creating counts of locations 

```{sql}
#| label: SQL to get the counts
#| eval: false
alter table staging.us_ntia
add column cnt_25_3_past int,
add column cnt_100_20_past int,
add column cnt_100_20_not_dsl int,
add column cnt_100_20_not_wireless int,
add column cnt_100_20_not_dsl_wireless int;

update
	staging.us_ntia as t1
set 
	cnt_25_3_past = t2.cnt_25_3_past,
	cnt_100_20_past = t2.cnt_100_20_past,
	cnt_100_20_not_dsl = t2.cnt_100_20_not_dsl,
	cnt_100_20_not_wireless = t2.cnt_100_20_not_wireless,
	cnt_100_20_not_dsl_wireless = t2.cnt_100_20_not_dsl_wireless

from(
	select 
		block_geoid as geoid_bl,
		count(distinct case when 
			(max_advertised_download_speed >= 25 and max_advertised_upload_speed >= 3) 
			              then location_id end) as cnt_25_3_past,
		count(distinct case when 
			(max_advertised_download_speed >= 100 and max_advertised_upload_speed >= 20) 
			              then location_id end) as cnt_100_20_past,
		count(distinct case when 
			(max_advertised_download_speed >= 100 and max_advertised_upload_speed >= 20
			and technology <> 10) 
			              then location_id end) as cnt_100_20_not_dsl,
	    count(distinct case when 
			(max_advertised_download_speed >= 100 and max_advertised_upload_speed >= 20
			and technology NOT IN (71, 72)) 
			              then location_id end) as cnt_100_20_not_wireless,
		count(distinct case when 
			(max_advertised_download_speed >= 100 and max_advertised_upload_speed >= 20
			and technology NOT IN (10, 71, 72)) 
			              then location_id end) as cnt_100_20_not_dsl_wireless
	from 
		staging.bcat_raw
	group by 
		block_geoid
) as t2
where    
	t1.geoid_bl = t2.geoid_bl;

-- we were focusing strickly in underserved hence 
-- we removed unserved for counts
alter table staging.us_ntia
add column underserved_past int,
add column underserved_not_dsl int,
add column underserved_not_wireless int,
add column underserved_not_dsl_wireless int;

update
	staging.us_ntia
set 
	underserved_past = cnt_25_3_past - cnt_100_20_past,
	underserved_not_dsl = cnt_25_3_past - cnt_100_20_not_dsl,
	underserved_not_wireless = cnt_25_3_past - cnt_100_20_not_wireless,
	underserved_not_dsl_wireless = cnt_25_3_past - cnt_100_20_not_dsl_wireless;

```


## Recreating and generating previous and new categories

```{sql}
#| label: SQL query to get the various categories
#| eval: false
alter table staging.us_ntia 
add column pct_100_20_past float,
add column pct_25_3_past float,
add column pct_100_20_not_dsl float,
add column pct_100_20_not_wireless float,
add column pct_100_20_not_dsl_wireless float;

update
	staging.us_ntia  as t1
set 
	pct_100_20_past = cnt_100_20_past/cnt_total_locations::float,
	pct_25_3_past = cnt_25_3_past/cnt_total_locations::float,
	pct_100_20_not_dsl = cnt_100_20_not_dsl / cnt_total_locations::float,
	pct_100_20_not_wireless = cnt_100_20_not_wireless / cnt_total_locations::float,
	pct_100_20_not_dsl_wireless = cnt_100_20_not_dsl_wireless / cnt_total_locations::float

alter table staging.us_ntia
add column bl_100_20_area_past varchar(25),
add column bl_25_3_area_past varchar(25),
add column bl_100_20_area_not_dsl varchar(25),
add column bl_100_20_area_not_wireless varchar(25),
add column bl_100_20_area_not_dsl_wireless varchar(25);

update
	staging.us_ntia
set 
	bl_100_20_area_past = case 
			when cnt_total_locations is null then 'not_reported'
			when cnt_bcat_locations is null then 'unserved_area'
			when pct_100_20_past < .2 and pct_25_3_past < .2 then 'unserved_area'
			when pct_100_20_past < .2 then 'underserved_area'
			else 'served_area' end,
	bl_25_3_area_past  = case 
			when cnt_total_locations is null then 'not_reported'
			when cnt_bcat_locations is null then 'unserved_area'
			when pct_25_3_past < .2 then 'unserved_area'
			else 'served_area' end,
	bl_100_20_area_not_dsl = case 
			when cnt_total_locations is null then 'not_reported'
			when cnt_bcat_locations is null then 'unserved_area'
			when pct_100_20_not_dsl < .2 and pct_25_3_past < .2 then 'unserved_area'
			when pct_100_20_not_dsl < .2 then 'underserved_area'
			else 'served_area' end,
	bl_100_20_area_not_wireless = case 
			when cnt_total_locations is null then 'not_reported'
			when cnt_bcat_locations is null then 'unserved_area'
			when pct_100_20_not_wireless < .2 and pct_25_3_past < .2 then 'unserved_area'
			when pct_100_20_not_wireless < .2 then 'underserved_area'
			else 'served_area' end,
	bl_100_20_area_not_dsl_wireless = case 
			when cnt_total_locations is null then 'not_reported'
			when cnt_bcat_locations is null then 'unserved_area'
			when pct_100_20_not_dsl_wireless < .2 and pct_25_3_past < .2 then 'unserved_area'
			when pct_100_20_not_dsl_wireless < .2 then 'underserved_area'
			else 'served_area' end;
  
alter table staging.us_ntia
add column category_past varchar(25),
add column category_not_dsl varchar(25),
add column category_not_wireless varchar(25),
add column category_not_dsl_wireless varchar(25);

update staging.us_ntia
set category_past =
	case 
		when bl_25_3_area_past = 'not_reported' then 'Not Reported'
		when bl_100_20_area_past = 'unserved_area' then 'Unserved'
		when bl_100_20_area_past = 'underserved_area' then 'Underserved'
 	else 'Served' end,
	category_not_dsl =
	case 
		when bl_25_3_area_past = 'not_reported' then 'Not Reported'
		when bl_100_20_area_not_dsl = 'unserved_area' then 'Unserved'
		when bl_100_20_area_not_dsl = 'underserved_area' then 'Underserved'
 	else 'Served' end,
	 category_not_wireless = 
	 	case 
		when bl_25_3_area_past = 'not_reported' then 'Not Reported'
		when bl_100_20_area_not_wireless = 'unserved_area' then 'Unserved'
		when bl_100_20_area_not_wireless = 'underserved_area' then 'Underserved'
 	else 'Served' end,
	 category_not_dsl_wireless = 
	 	case 
		when bl_25_3_area_past = 'not_reported' then 'Not Reported'
		when bl_100_20_area_not_dsl_wireless = 'unserved_area' then 'Unserved'
		when bl_100_20_area_not_dsl_wireless = 'underserved_area' then 'Underserved'
 	else 'Served'
	 end;

-- useful stuffs
alter table staging.us_ntia
add column geoid_st varchar(2);

update staging.us_ntia
set geoid_st = left(geoid_bl, 2);

alter table staging.us_ntia owner to mda_team;
```

# Some aggregates

##  Count by states

```{sql}
#| label: aggregate of count at states level
#| eval: false
select
	geoid_st,
	sum(cnt_total_locations) as cnt_total_locaction,
	sum(cnt_25_3_past) as cnt_25_3_past,
	sum(underserved_past) as cnt_underserved_past,
	sum(underserved_not_dsl) as cnt_underserved_not_dsl,
	sum(underserved_not_wireless) as cnt_underserved_not_wireless,
	sum(underserved_not_dsl_wireless) as cnt_underseved_not_dsl_wireless
from staging.us_ntia
group by geoid_st
```

```{r}
cnt_st_ntia <- read.csv("data/cnt_st_ntia.csv")

table_with_options(cnt_st_ntia)
```

We will probably need to calculate that on some rate, unsure if I want that on total number of location or by our previous count. (I skept because it was not on requirement TM, and I was running out of time)

## Eligibility underserved / dsl&wireless

```{sql}
#| label: aggregate of eligibility at states level
#| eval: false
select
geoid_st,
	count(*) as numb_bl,
	sum(case when category_past = 'Underserved' then 1 else 0 end) as cnt_underserved_past,
	sum(case when category_not_dsl = 'Underserved' then 1 else 0 end) as cnt_underserved_not_dsl,
	sum(case when category_not_wireless = 'Underserved' then 1 else 0 end) as cnt_underserved_not_wireless,
	sum(case when category_not_dsl_wireless = 'Underserved' then 1 else 0 end) as cnt_underserved_not_dsl_wireless
from staging.us_ntia
group by geoid_st
```

```{r}
eligibiliy_st_ntia <- read.csv("data/cnt_eligibility_underserved.csv")

table_with_options(eligibiliy_st_ntia)
```

## MS building footprint in VT

MS is producing a data set of buildings (polygons) build by computer vision (classification, convert to vector). 

As we do not care of the shape of the building we just converted to point (picking one vertex per polygon). 

We can then count those points per block and compare to the number of location than FCC is descriving.

```{r}
vt <- read.csv("data/vt_ms.csv")
vt$tot_loc <-as.numeric(vt$tot_loc) 
vt$tot_loc <- ifelse(is.na(vt$tot_loc), 0, vt$tot_loc)

lm_ms <- lm(cnt_ms ~ tot_loc, data = vt)
pot_val <- seq(min(vt$tot_loc), max(vt$tot_loc), by = 0.025)
conf_interval <- predict(lm_ms, newdata = data.frame( tot_loc = pot_val) ,
						 interval = "prediction", level = 0.95)

plot(vt$cnt_ms, vt$tot_loc,  col = 2, asp = 1, 
xlab = "cnt of MS buildings", ylab = "cnt of fcc locations") 
abline(lm_ms, col = 4)
abline(1:500, 1:500, col = "black")
lines(pot_val, conf_interval[, "lwr"], col = "blue", lty = 2)
lines(pot_val, conf_interval[, "upr"], col =" blue", lty = 2)
```

- my model (just a linear one) is probably bad (log should correct that)

- still strong relation 

- it seems MS has **more** locations (285333, versus 352618) 


## Some tl:dr

* it has heterogneous effects

* it has a big impacts
